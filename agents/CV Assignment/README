Part 1. # Describe your approach here
Classify foilage first performs a median filter on the input image, with the intent of smoothing out "salt-and-pepper" noise.
Then, it converts the image to the HSV color space. At this point, we used the provided filterColor.py to try out different HSV
thresholds. Once we messed with the thresholds to get a stasfactory result of masking out non-foilage pixels, we saved the
values by hard coding them in a python array. Then, we used the inRange function to generate a mask with the same dimensions 
as the original image. Finally, we performed another median blur on the mask to get rid of any stray pixels that made it 
past the thresholding but were not likely to be a part of foilage.

Part 2. # Describe your approach here
Measure_height first creates a mask on the day02 image of the measuring stick, where there is no foliage. The mask is white where the stick is, and black elsewhere. This mask was created by grabbing 4 coordinates of the stick, and drawing a white polygon made of these coordinates  on a black background. Then, this mask is bitwise anded with (255 - day02_image), in order to have only the colored measuring stick on a black background. The ticks at this point are white due to the subtraction from 255, and thus to grab the ticks, we need to filter out everything but the white color. So, we use inRange to generate a mask of only the tick marks. Then, to determine the pixels corresponding to each centimeter, we took the 'max' of each row. With this new 1 column vector, we iterated through, taking note of the ranges of each section of white. We ensured that each 'range' consisting of only white was large enough (> 20 pixels), and not just a few specks of white from previous masking edge cases. At this point, we had a y-pixel range for each centimeter on the stick. 

Given the foliage mask, we applied a bitwise and with the whole stick mask. Thus, the only white pixels are those which are both on the foliage and the stick. Then, we took the pixel that occurs highest on the image, and determined if it belonged to any of the pixel ranges we calculated earlier. If it does, we return the centimeter it corresponds to. Otherwise, we calculate the exact decimal height based on the proportion to the difference of the next highest centimeter and the next lowest centimeter.  
